/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the InstanceViewStatus class.
 * @constructor
 * Instance view status.
 * @member {string} [code] Gets or sets the status Code.
 * 
 * @member {string} [level] Gets or sets the level Code. Possible values for
 * this property include: 'Info', 'Warning', 'Error'.
 * 
 * @member {string} [displayStatus] Gets or sets the short localizable label
 * for the status.
 * 
 * @member {string} [message] Gets or sets the optional detailed Message,
 * including for alerts and error messages.
 * 
 * @member {date} [time] Gets or sets the time of the status.
 * 
 */
function InstanceViewStatus(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.code !== undefined) {
      this.code = parameters.code;
    }
    if (parameters.level !== undefined) {
      this.level = parameters.level;
    }
    if (parameters.displayStatus !== undefined) {
      this.displayStatus = parameters.displayStatus;
    }
    if (parameters.message !== undefined) {
      this.message = parameters.message;
    }
    if (parameters.time !== undefined) {
      this.time = parameters.time;
    }
  }    
}


/**
 * Validate the payload against the InstanceViewStatus schema
 *
 * @param {JSON} payload
 *
 */
InstanceViewStatus.prototype.serialize = function () {
  var payload = {};
  if (this['code'] !== null && this['code'] !== undefined) {
    if (typeof this['code'].valueOf() !== 'string') {
      throw new Error('this[\'code\'] must be of type string.');
    }
    payload['code'] = this['code'];
  }

  if (this['level'] !== null && this['level'] !== undefined) {
    if (typeof this['level'].valueOf() !== 'string') {
      throw new Error('this[\'level\'] must be of type string.');
    }
    payload['level'] = this['level'];
  }

  if (this['displayStatus'] !== null && this['displayStatus'] !== undefined) {
    if (typeof this['displayStatus'].valueOf() !== 'string') {
      throw new Error('this[\'displayStatus\'] must be of type string.');
    }
    payload['displayStatus'] = this['displayStatus'];
  }

  if (this['message'] !== null && this['message'] !== undefined) {
    if (typeof this['message'].valueOf() !== 'string') {
      throw new Error('this[\'message\'] must be of type string.');
    }
    payload['message'] = this['message'];
  }

  if (this['time']) {
    if (!(this['time'] instanceof Date || typeof this['time'].valueOf() === 'string' && !isNaN(Date.parse(this['time'])))) {
      throw new Error('this[\'time\'] must be of type date.');
    }
    payload['time'] = (this['time'] instanceof Date) ? this['time'].toISOString() : this['time'];
  }

  return payload;
};

/**
 * Deserialize the instance to InstanceViewStatus schema
 *
 * @param {JSON} instance
 *
 */
InstanceViewStatus.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['code'] !== undefined) {
      this['code'] = instance['code'];
    }

    if (instance['level'] !== undefined) {
      this['level'] = instance['level'];
    }

    if (instance['displayStatus'] !== undefined) {
      this['displayStatus'] = instance['displayStatus'];
    }

    if (instance['message'] !== undefined) {
      this['message'] = instance['message'];
    }

    if (instance['time']) {
      this['time'] = new Date(instance['time']);
    }
    else if (instance['time'] !== undefined) {
      this['time'] = instance['time'];
    }
  }

  return this;
};

module.exports = InstanceViewStatus;
