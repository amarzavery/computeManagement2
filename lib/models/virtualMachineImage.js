/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineImage class.
 * @constructor
 * Describes a Virtual Machine Image.
 * @member {string} name Gets or sets the name of the resource.
 * 
 * @member {string} location Gets or sets the location of the resource.
 * 
 * @member {object} [tags] Gets or sets the tags attached to the resource.
 * 
 * @member {object} [plan]
 * 
 * @member {string} [plan.publisher] Gets or sets the publisher ID.
 * 
 * @member {string} [plan.name] Gets or sets the plan ID.
 * 
 * @member {string} [plan.product] Gets or sets the product ID.
 * 
 * @member {object} [osDiskImage]
 * 
 * @member {string} [osDiskImage.operatingSystem] Gets or sets the operating
 * system of the osDiskImage. Possible values for this property include:
 * 'Windows', 'Linux'.
 * 
 * @member {array} [dataDiskImages]
 * 
 */
function VirtualMachineImage(parameters) {
  VirtualMachineImage['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.location !== undefined) {
      this.location = parameters.location;
    }
    if (parameters.tags) {
      this.tags = {};
      for(var valueElement in parameters.tags) {
        if (parameters.tags[valueElement] !== undefined) {
          this.tags[valueElement] = parameters.tags[valueElement];
        }
      }
    }
    if (parameters.plan) {
      this.plan = new models['PurchasePlan'](parameters.plan);
    }
    if (parameters.osDiskImage) {
      this.osDiskImage = new models['OSDiskImage'](parameters.osDiskImage);
    }
    if (parameters.dataDiskImages) {
      var tempParametersdataDiskImages = [];
      parameters.dataDiskImages.forEach(function(element) {
        if (element) {
          element = new models['DataDiskImage'](element);
        }
        tempParametersdataDiskImages.push(element);
      });
      this.dataDiskImages = tempParametersdataDiskImages;
    }
  }    
}

util.inherits(VirtualMachineImage, models['SubResource']);

/**
 * Validate the payload against the VirtualMachineImage schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineImage.prototype.serialize = function () {
  var payload = VirtualMachineImage['super_'].prototype.serialize.call(this);
  if (this['name'] === null || this['name'] === undefined || typeof this['name'].valueOf() !== 'string') {
    throw new Error('this[\'name\'] cannot be null or undefined and it must be of type string.');
  }
  payload['name'] = this['name'];

  if (this['location'] === null || this['location'] === undefined || typeof this['location'].valueOf() !== 'string') {
    throw new Error('this[\'location\'] cannot be null or undefined and it must be of type string.');
  }
  payload['location'] = this['location'];

  if (this['tags'] && typeof this['tags'] === 'object') {
    payload['tags'] = {};
    for(var valueElement1 in this['tags']) {
      if (this['tags'][valueElement1] !== null && this['tags'][valueElement1] !== undefined) {
        if (typeof this['tags'][valueElement1].valueOf() !== 'string') {
          throw new Error('this[\'tags\'][valueElement1] must be of type string.');
        }
        payload['tags'][valueElement1] = this['tags'][valueElement1];
      }
      else {
        payload['tags'][valueElement1] = this['tags'][valueElement1];
      }
    }
  }

  if (this['plan']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['plan'] = this['plan'].serialize();
  }

  if (this['osDiskImage']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['osDiskImage'] = this['osDiskImage'].serialize();
  }

  if (util.isArray(this['dataDiskImages'])) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['dataDiskImages'] = [];
    for (var i = 0; i < this['dataDiskImages'].length; i++) {
      if (this['dataDiskImages'][i]) {
        payload['properties']['dataDiskImages'][i] = this['dataDiskImages'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineImage schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineImage.prototype.deserialize = function (instance) {
  VirtualMachineImage['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['location'] !== undefined) {
      this['location'] = instance['location'];
    }

    if (instance['tags']) {
      this['tags'] = {};
      for(var valueElement2 in instance['tags']) {
        if (instance['tags'] !== null && instance['tags'] !== undefined) {
          if (instance['tags'][valueElement2] !== undefined) {
            this['tags'][valueElement2] = instance['tags'][valueElement2];
          }
        }
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['plan']) {
        this['plan'] = new models['PurchasePlan']().deserialize(instance['properties']['plan']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['osDiskImage']) {
        this['osDiskImage'] = new models['OSDiskImage']().deserialize(instance['properties']['osDiskImage']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['dataDiskImages']) {
        var tempInstancepropertiesdataDiskImages = [];
        instance['properties']['dataDiskImages'].forEach(function(element1) {
          if (element1) {
            element1 = new models['DataDiskImage']().deserialize(element1);
          }
          tempInstancepropertiesdataDiskImages.push(element1);
        });
        this['dataDiskImages'] = tempInstancepropertiesdataDiskImages;
      }
    }
  }

  return this;
};

module.exports = VirtualMachineImage;
