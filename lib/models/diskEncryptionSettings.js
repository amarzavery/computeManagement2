/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the DiskEncryptionSettings class.
 * @constructor
 * Describes a Encryption Settings for a Disk
 * @member {object} diskEncryptionKey Gets or sets the disk encryption key
 * which is a KeyVault Secret.
 * 
 * @member {string} [diskEncryptionKey.secretUrl] Gets or sets the URL
 * referencing a secret in a Key Vault.
 * 
 * @member {object} [diskEncryptionKey.sourceVault] Gets or sets the Relative
 * URL of the Key Vault containing the secret.
 * 
 * @member {string} [diskEncryptionKey.sourceVault.id] Resource Id
 * 
 * @member {object} [keyEncryptionKey] Gets or sets the key encryption key
 * which is KeyVault Key.
 * 
 * @member {string} [keyEncryptionKey.keyUrl] Gets or sets the URL referencing
 * a key in a Key Vault.
 * 
 * @member {object} [keyEncryptionKey.sourceVault] Gets or sets the Relative
 * URL of the Key Vault containing the key
 * 
 * @member {string} [keyEncryptionKey.sourceVault.id] Resource Id
 * 
 */
function DiskEncryptionSettings(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.diskEncryptionKey) {
      this.diskEncryptionKey = new models['KeyVaultSecretReference'](parameters.diskEncryptionKey);
    }
    if (parameters.keyEncryptionKey) {
      this.keyEncryptionKey = new models['KeyVaultKeyReference'](parameters.keyEncryptionKey);
    }
  }    
}


/**
 * Validate the payload against the DiskEncryptionSettings schema
 *
 * @param {JSON} payload
 *
 */
DiskEncryptionSettings.prototype.serialize = function () {
  var payload = {};
  if (this['diskEncryptionKey']) {
    payload['diskEncryptionKey'] = this['diskEncryptionKey'].serialize();
  }
   else {  throw new Error('this[\'diskEncryptionKey\'] cannot be null or undefined.');
  }

  if (this['keyEncryptionKey']) {
    payload['keyEncryptionKey'] = this['keyEncryptionKey'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to DiskEncryptionSettings schema
 *
 * @param {JSON} instance
 *
 */
DiskEncryptionSettings.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['diskEncryptionKey']) {
      this['diskEncryptionKey'] = new models['KeyVaultSecretReference']().deserialize(instance['diskEncryptionKey']);
    }

    if (instance['keyEncryptionKey']) {
      this['keyEncryptionKey'] = new models['KeyVaultKeyReference']().deserialize(instance['keyEncryptionKey']);
    }
  }

  return this;
};

module.exports = DiskEncryptionSettings;
