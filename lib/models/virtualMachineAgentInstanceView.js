/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineAgentInstanceView class.
 * @constructor
 * The instance view of the VM Agent running on the virtual machine.
 * @member {string} [vmAgentVersion] Gets or sets the VM Agent full version.
 * 
 * @member {array} [extensionHandlers] Gets or sets the virtual machine
 * extension handler instance view.
 * 
 * @member {array} [statuses] Gets or sets the resource status information.
 * 
 */
function VirtualMachineAgentInstanceView(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.vmAgentVersion !== undefined) {
      this.vmAgentVersion = parameters.vmAgentVersion;
    }
    if (parameters.extensionHandlers) {
      var tempParametersextensionHandlers = [];
      parameters.extensionHandlers.forEach(function(element) {
        if (element) {
          element = new models['VirtualMachineExtensionHandlerInstanceView'](element);
        }
        tempParametersextensionHandlers.push(element);
      });
      this.extensionHandlers = tempParametersextensionHandlers;
    }
    if (parameters.statuses) {
      var tempParametersstatuses = [];
      parameters.statuses.forEach(function(element1) {
        if (element1) {
          element1 = new models['InstanceViewStatus'](element1);
        }
        tempParametersstatuses.push(element1);
      });
      this.statuses = tempParametersstatuses;
    }
  }    
}


/**
 * Validate the payload against the VirtualMachineAgentInstanceView schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineAgentInstanceView.prototype.serialize = function () {
  var payload = {};
  if (this['vmAgentVersion'] !== null && this['vmAgentVersion'] !== undefined) {
    if (typeof this['vmAgentVersion'].valueOf() !== 'string') {
      throw new Error('this[\'vmAgentVersion\'] must be of type string.');
    }
    payload['vmAgentVersion'] = this['vmAgentVersion'];
  }

  if (util.isArray(this['extensionHandlers'])) {
    payload['extensionHandlers'] = [];
    for (var i = 0; i < this['extensionHandlers'].length; i++) {
      if (this['extensionHandlers'][i]) {
        payload['extensionHandlers'][i] = this['extensionHandlers'][i].serialize();
      }
    }
  }

  if (util.isArray(this['statuses'])) {
    payload['statuses'] = [];
    for (var i1 = 0; i1 < this['statuses'].length; i1++) {
      if (this['statuses'][i1]) {
        payload['statuses'][i1] = this['statuses'][i1].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineAgentInstanceView schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineAgentInstanceView.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['vmAgentVersion'] !== undefined) {
      this['vmAgentVersion'] = instance['vmAgentVersion'];
    }

    if (instance['extensionHandlers']) {
      var tempInstanceextensionHandlers = [];
      instance['extensionHandlers'].forEach(function(element2) {
        if (element2) {
          element2 = new models['VirtualMachineExtensionHandlerInstanceView']().deserialize(element2);
        }
        tempInstanceextensionHandlers.push(element2);
      });
      this['extensionHandlers'] = tempInstanceextensionHandlers;
    }

    if (instance['statuses']) {
      var tempInstancestatuses = [];
      instance['statuses'].forEach(function(element3) {
        if (element3) {
          element3 = new models['InstanceViewStatus']().deserialize(element3);
        }
        tempInstancestatuses.push(element3);
      });
      this['statuses'] = tempInstancestatuses;
    }
  }

  return this;
};

module.exports = VirtualMachineAgentInstanceView;
