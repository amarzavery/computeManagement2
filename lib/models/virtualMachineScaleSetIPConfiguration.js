/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineScaleSetIPConfiguration class.
 * @constructor
 * Describes a virtual machine scale set network profile's IP configuration.
 * @member {string} name Gets or sets the IP configuration name.
 * 
 * @member {object} subnet Gets or sets the subnet.
 * 
 * @member {string} [subnet.id] Gets or sets the relative URL in the previous
 * Service Management API's namespace. For Example:
 * /subscriptions/{SubcriptionId}/resourceGroups/{ResourceGroupName}/...
 * 
 * @member {array} [loadBalancerBackendAddressPools] Gets or sets the load
 * balancer backend address pools.
 * 
 */
function VirtualMachineScaleSetIPConfiguration(parameters) {
  VirtualMachineScaleSetIPConfiguration['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.subnet) {
      this.subnet = new models['ApiEntityReference'](parameters.subnet);
    }
    if (parameters.loadBalancerBackendAddressPools) {
      var tempParametersloadBalancerBackendAddressPools = [];
      parameters.loadBalancerBackendAddressPools.forEach(function(element) {
        if (element) {
          element = new models['SubResource'](element);
        }
        tempParametersloadBalancerBackendAddressPools.push(element);
      });
      this.loadBalancerBackendAddressPools = tempParametersloadBalancerBackendAddressPools;
    }
  }    
}

util.inherits(VirtualMachineScaleSetIPConfiguration, models['SubResource']);

/**
 * Validate the payload against the VirtualMachineScaleSetIPConfiguration schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineScaleSetIPConfiguration.prototype.serialize = function () {
  var payload = VirtualMachineScaleSetIPConfiguration['super_'].prototype.serialize.call(this);
  if (this['name'] === null || this['name'] === undefined || typeof this['name'].valueOf() !== 'string') {
    throw new Error('this[\'name\'] cannot be null or undefined and it must be of type string.');
  }
  payload['name'] = this['name'];

  if (this['subnet']) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['subnet'] = this['subnet'].serialize();
  }
   else {  throw new Error('this[\'subnet\'] cannot be null or undefined.');
  }

  if (util.isArray(this['loadBalancerBackendAddressPools'])) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['loadBalancerBackendAddressPools'] = [];
    for (var i = 0; i < this['loadBalancerBackendAddressPools'].length; i++) {
      if (this['loadBalancerBackendAddressPools'][i]) {
        payload['properties']['loadBalancerBackendAddressPools'][i] = this['loadBalancerBackendAddressPools'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineScaleSetIPConfiguration schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineScaleSetIPConfiguration.prototype.deserialize = function (instance) {
  VirtualMachineScaleSetIPConfiguration['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['subnet']) {
        this['subnet'] = new models['ApiEntityReference']().deserialize(instance['properties']['subnet']);
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['loadBalancerBackendAddressPools']) {
        var tempInstancepropertiesloadBalancerBackendAddressPools = [];
        instance['properties']['loadBalancerBackendAddressPools'].forEach(function(element1) {
          if (element1) {
            element1 = new models['SubResource']().deserialize(element1);
          }
          tempInstancepropertiesloadBalancerBackendAddressPools.push(element1);
        });
        this['loadBalancerBackendAddressPools'] = tempInstancepropertiesloadBalancerBackendAddressPools;
      }
    }
  }

  return this;
};

module.exports = VirtualMachineScaleSetIPConfiguration;
