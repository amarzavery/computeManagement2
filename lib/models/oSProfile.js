/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the OSProfile class.
 * @constructor
 * Describes an OS profile.
 * @member {string} [computerName] Gets or sets the computer name.
 * 
 * @member {string} [adminUsername] Gets or sets the admin user name.
 * 
 * @member {string} [adminPassword] Gets or sets the admin user password.
 * 
 * @member {string} [customData] Gets or sets a base-64 encoded string of
 * custom data.
 * 
 * @member {object} [windowsConfiguration] Gets or sets the Windows
 * Configuration of the OS profile.
 * 
 * @member {boolean} [windowsConfiguration.provisionVMAgent] Gets or sets
 * whether VM Agent should be provisioned on the Virtual Machine.
 * 
 * @member {boolean} [windowsConfiguration.enableAutomaticUpdates] Gets or
 * sets whether Windows updates are automatically installed on the VM
 * 
 * @member {string} [windowsConfiguration.timeZone] Gets or sets the Time Zone
 * of the VM
 * 
 * @member {array} [windowsConfiguration.additionalUnattendContent] Gets or
 * sets the additional base-64 encoded XML formatted information that can be
 * included in the Unattend.xml file.
 * 
 * @member {object} [windowsConfiguration.winRM] Gets or sets the Windows
 * Remote Management configuration of the VM
 * 
 * @member {array} [windowsConfiguration.winRM.listeners] Gets or sets the
 * list of Windows Remote Management listeners
 * 
 * @member {object} [linuxConfiguration] Gets or sets the Linux Configuration
 * of the OS profile.
 * 
 * @member {boolean} [linuxConfiguration.disablePasswordAuthentication] Gets
 * or sets whether Authentication using user name and password is allowed or
 * not
 * 
 * @member {object} [linuxConfiguration.ssh] Gets or sets the SSH
 * configuration for linux VMs
 * 
 * @member {array} [linuxConfiguration.ssh.publicKeys] Gets or sets the list
 * of SSH public keys used to authenticate with linux based VMs
 * 
 * @member {array} [secrets] Gets or sets the List of certificates for
 * addition to the VM.
 * 
 */
function OSProfile(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.computerName !== undefined) {
      this.computerName = parameters.computerName;
    }
    if (parameters.adminUsername !== undefined) {
      this.adminUsername = parameters.adminUsername;
    }
    if (parameters.adminPassword !== undefined) {
      this.adminPassword = parameters.adminPassword;
    }
    if (parameters.customData !== undefined) {
      this.customData = parameters.customData;
    }
    if (parameters.windowsConfiguration) {
      this.windowsConfiguration = new models['WindowsConfiguration'](parameters.windowsConfiguration);
    }
    if (parameters.linuxConfiguration) {
      this.linuxConfiguration = new models['LinuxConfiguration'](parameters.linuxConfiguration);
    }
    if (parameters.secrets) {
      var tempParameterssecrets = [];
      parameters.secrets.forEach(function(element) {
        if (element) {
          element = new models['VaultSecretGroup'](element);
        }
        tempParameterssecrets.push(element);
      });
      this.secrets = tempParameterssecrets;
    }
  }    
}


/**
 * Validate the payload against the OSProfile schema
 *
 * @param {JSON} payload
 *
 */
OSProfile.prototype.serialize = function () {
  var payload = {};
  if (this['computerName'] !== null && this['computerName'] !== undefined) {
    if (typeof this['computerName'].valueOf() !== 'string') {
      throw new Error('this[\'computerName\'] must be of type string.');
    }
    payload['computerName'] = this['computerName'];
  }

  if (this['adminUsername'] !== null && this['adminUsername'] !== undefined) {
    if (typeof this['adminUsername'].valueOf() !== 'string') {
      throw new Error('this[\'adminUsername\'] must be of type string.');
    }
    payload['adminUsername'] = this['adminUsername'];
  }

  if (this['adminPassword'] !== null && this['adminPassword'] !== undefined) {
    if (typeof this['adminPassword'].valueOf() !== 'string') {
      throw new Error('this[\'adminPassword\'] must be of type string.');
    }
    payload['adminPassword'] = this['adminPassword'];
  }

  if (this['customData'] !== null && this['customData'] !== undefined) {
    if (typeof this['customData'].valueOf() !== 'string') {
      throw new Error('this[\'customData\'] must be of type string.');
    }
    payload['customData'] = this['customData'];
  }

  if (this['windowsConfiguration']) {
    payload['windowsConfiguration'] = this['windowsConfiguration'].serialize();
  }

  if (this['linuxConfiguration']) {
    payload['linuxConfiguration'] = this['linuxConfiguration'].serialize();
  }

  if (util.isArray(this['secrets'])) {
    payload['secrets'] = [];
    for (var i = 0; i < this['secrets'].length; i++) {
      if (this['secrets'][i]) {
        payload['secrets'][i] = this['secrets'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to OSProfile schema
 *
 * @param {JSON} instance
 *
 */
OSProfile.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['computerName'] !== undefined) {
      this['computerName'] = instance['computerName'];
    }

    if (instance['adminUsername'] !== undefined) {
      this['adminUsername'] = instance['adminUsername'];
    }

    if (instance['adminPassword'] !== undefined) {
      this['adminPassword'] = instance['adminPassword'];
    }

    if (instance['customData'] !== undefined) {
      this['customData'] = instance['customData'];
    }

    if (instance['windowsConfiguration']) {
      this['windowsConfiguration'] = new models['WindowsConfiguration']().deserialize(instance['windowsConfiguration']);
    }

    if (instance['linuxConfiguration']) {
      this['linuxConfiguration'] = new models['LinuxConfiguration']().deserialize(instance['linuxConfiguration']);
    }

    if (instance['secrets']) {
      var tempInstancesecrets = [];
      instance['secrets'].forEach(function(element1) {
        if (element1) {
          element1 = new models['VaultSecretGroup']().deserialize(element1);
        }
        tempInstancesecrets.push(element1);
      });
      this['secrets'] = tempInstancesecrets;
    }
  }

  return this;
};

module.exports = OSProfile;
