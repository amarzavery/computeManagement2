/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineExtensionInstanceView class.
 * @constructor
 * The instance view of a virtual machine extension.
 * @member {string} [name] Gets or sets the virtual machine extension name.
 * 
 * @member {string} [type] Gets or sets the full type of the extension handler
 * which includes both publisher and type.
 * 
 * @member {string} [typeHandlerVersion] Gets or sets the type version of the
 * extension handler.
 * 
 * @member {array} [substatuses] Gets or sets the resource status information.
 * 
 * @member {array} [statuses] Gets or sets the resource status information.
 * 
 */
function VirtualMachineExtensionInstanceView(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.typeHandlerVersion !== undefined) {
      this.typeHandlerVersion = parameters.typeHandlerVersion;
    }
    if (parameters.substatuses) {
      var tempParameterssubstatuses = [];
      parameters.substatuses.forEach(function(element) {
        if (element) {
          element = new models['InstanceViewStatus'](element);
        }
        tempParameterssubstatuses.push(element);
      });
      this.substatuses = tempParameterssubstatuses;
    }
    if (parameters.statuses) {
      var tempParametersstatuses = [];
      parameters.statuses.forEach(function(element1) {
        if (element1) {
          element1 = new models['InstanceViewStatus'](element1);
        }
        tempParametersstatuses.push(element1);
      });
      this.statuses = tempParametersstatuses;
    }
  }    
}


/**
 * Validate the payload against the VirtualMachineExtensionInstanceView schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineExtensionInstanceView.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (this['typeHandlerVersion'] !== null && this['typeHandlerVersion'] !== undefined) {
    if (typeof this['typeHandlerVersion'].valueOf() !== 'string') {
      throw new Error('this[\'typeHandlerVersion\'] must be of type string.');
    }
    payload['typeHandlerVersion'] = this['typeHandlerVersion'];
  }

  if (util.isArray(this['substatuses'])) {
    payload['substatuses'] = [];
    for (var i = 0; i < this['substatuses'].length; i++) {
      if (this['substatuses'][i]) {
        payload['substatuses'][i] = this['substatuses'][i].serialize();
      }
    }
  }

  if (util.isArray(this['statuses'])) {
    payload['statuses'] = [];
    for (var i1 = 0; i1 < this['statuses'].length; i1++) {
      if (this['statuses'][i1]) {
        payload['statuses'][i1] = this['statuses'][i1].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineExtensionInstanceView schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineExtensionInstanceView.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['typeHandlerVersion'] !== undefined) {
      this['typeHandlerVersion'] = instance['typeHandlerVersion'];
    }

    if (instance['substatuses']) {
      var tempInstancesubstatuses = [];
      instance['substatuses'].forEach(function(element2) {
        if (element2) {
          element2 = new models['InstanceViewStatus']().deserialize(element2);
        }
        tempInstancesubstatuses.push(element2);
      });
      this['substatuses'] = tempInstancesubstatuses;
    }

    if (instance['statuses']) {
      var tempInstancestatuses = [];
      instance['statuses'].forEach(function(element3) {
        if (element3) {
          element3 = new models['InstanceViewStatus']().deserialize(element3);
        }
        tempInstancestatuses.push(element3);
      });
      this['statuses'] = tempInstancestatuses;
    }
  }

  return this;
};

module.exports = VirtualMachineExtensionInstanceView;
