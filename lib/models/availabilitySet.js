/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the AvailabilitySet class.
 * @constructor
 * Create or update Availability Set parameters.
 * @member {number} [platformUpdateDomainCount] Gets or sets Update Domain
 * count.
 * 
 * @member {number} [platformFaultDomainCount] Gets or sets Fault Domain count.
 * 
 * @member {array} [virtualMachines] Gets or sets a list containing reference
 * to all Virtual Machines  created under this Availability Set.
 * 
 * @member {array} [statuses] Gets or sets the resource status information.
 * 
 */
function AvailabilitySet(parameters) {
  AvailabilitySet['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.platformUpdateDomainCount !== undefined) {
      this.platformUpdateDomainCount = parameters.platformUpdateDomainCount;
    }
    if (parameters.platformFaultDomainCount !== undefined) {
      this.platformFaultDomainCount = parameters.platformFaultDomainCount;
    }
    if (parameters.virtualMachines) {
      var tempParametersvirtualMachines = [];
      parameters.virtualMachines.forEach(function(element) {
        if (element) {
          element = new models['SubResource'](element);
        }
        tempParametersvirtualMachines.push(element);
      });
      this.virtualMachines = tempParametersvirtualMachines;
    }
    if (parameters.statuses) {
      var tempParametersstatuses = [];
      parameters.statuses.forEach(function(element1) {
        if (element1) {
          element1 = new models['InstanceViewStatus'](element1);
        }
        tempParametersstatuses.push(element1);
      });
      this.statuses = tempParametersstatuses;
    }
  }    
}

util.inherits(AvailabilitySet, models['Resource']);

/**
 * Validate the payload against the AvailabilitySet schema
 *
 * @param {JSON} payload
 *
 */
AvailabilitySet.prototype.serialize = function () {
  var payload = AvailabilitySet['super_'].prototype.serialize.call(this);
  if (this['platformUpdateDomainCount'] !== null && this['platformUpdateDomainCount'] !== undefined) {
    if (typeof this['platformUpdateDomainCount'] !== 'number') {
      throw new Error('this[\'platformUpdateDomainCount\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['platformUpdateDomainCount'] = this['platformUpdateDomainCount'];
  }

  if (this['platformFaultDomainCount'] !== null && this['platformFaultDomainCount'] !== undefined) {
    if (typeof this['platformFaultDomainCount'] !== 'number') {
      throw new Error('this[\'platformFaultDomainCount\'] must be of type number.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['platformFaultDomainCount'] = this['platformFaultDomainCount'];
  }

  if (util.isArray(this['virtualMachines'])) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['virtualMachines'] = [];
    for (var i = 0; i < this['virtualMachines'].length; i++) {
      if (this['virtualMachines'][i]) {
        payload['properties']['virtualMachines'][i] = this['virtualMachines'][i].serialize();
      }
    }
  }

  if (util.isArray(this['statuses'])) {
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['statuses'] = [];
    for (var i1 = 0; i1 < this['statuses'].length; i1++) {
      if (this['statuses'][i1]) {
        payload['properties']['statuses'][i1] = this['statuses'][i1].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to AvailabilitySet schema
 *
 * @param {JSON} instance
 *
 */
AvailabilitySet.prototype.deserialize = function (instance) {
  AvailabilitySet['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['platformUpdateDomainCount'] !== undefined) {
        this['platformUpdateDomainCount'] = instance['properties']['platformUpdateDomainCount'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['platformFaultDomainCount'] !== undefined) {
        this['platformFaultDomainCount'] = instance['properties']['platformFaultDomainCount'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['virtualMachines']) {
        var tempInstancepropertiesvirtualMachines = [];
        instance['properties']['virtualMachines'].forEach(function(element2) {
          if (element2) {
            element2 = new models['SubResource']().deserialize(element2);
          }
          tempInstancepropertiesvirtualMachines.push(element2);
        });
        this['virtualMachines'] = tempInstancepropertiesvirtualMachines;
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['statuses']) {
        var tempInstancepropertiesstatuses = [];
        instance['properties']['statuses'].forEach(function(element3) {
          if (element3) {
            element3 = new models['InstanceViewStatus']().deserialize(element3);
          }
          tempInstancepropertiesstatuses.push(element3);
        });
        this['statuses'] = tempInstancepropertiesstatuses;
      }
    }
  }

  return this;
};

module.exports = AvailabilitySet;
