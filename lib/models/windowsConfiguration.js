/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the WindowsConfiguration class.
 * @constructor
 * Describes Windows Configuration of the OS Profile.
 * @member {boolean} [provisionVMAgent] Gets or sets whether VM Agent should
 * be provisioned on the Virtual Machine.
 * 
 * @member {boolean} [enableAutomaticUpdates] Gets or sets whether Windows
 * updates are automatically installed on the VM
 * 
 * @member {string} [timeZone] Gets or sets the Time Zone of the VM
 * 
 * @member {array} [additionalUnattendContent] Gets or sets the additional
 * base-64 encoded XML formatted information that can be included in the
 * Unattend.xml file.
 * 
 * @member {object} [winRM] Gets or sets the Windows Remote Management
 * configuration of the VM
 * 
 * @member {array} [winRM.listeners] Gets or sets the list of Windows Remote
 * Management listeners
 * 
 */
function WindowsConfiguration(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.provisionVMAgent !== undefined) {
      this.provisionVMAgent = parameters.provisionVMAgent;
    }
    if (parameters.enableAutomaticUpdates !== undefined) {
      this.enableAutomaticUpdates = parameters.enableAutomaticUpdates;
    }
    if (parameters.timeZone !== undefined) {
      this.timeZone = parameters.timeZone;
    }
    if (parameters.additionalUnattendContent) {
      var tempParametersadditionalUnattendContent = [];
      parameters.additionalUnattendContent.forEach(function(element) {
        if (element) {
          element = new models['AdditionalUnattendContent'](element);
        }
        tempParametersadditionalUnattendContent.push(element);
      });
      this.additionalUnattendContent = tempParametersadditionalUnattendContent;
    }
    if (parameters.winRM) {
      this.winRM = new models['WinRMConfiguration'](parameters.winRM);
    }
  }    
}


/**
 * Validate the payload against the WindowsConfiguration schema
 *
 * @param {JSON} payload
 *
 */
WindowsConfiguration.prototype.serialize = function () {
  var payload = {};
  if (this['provisionVMAgent'] !== null && this['provisionVMAgent'] !== undefined) {
    if (typeof this['provisionVMAgent'] !== 'boolean') {
      throw new Error('this[\'provisionVMAgent\'] must be of type boolean.');
    }
    payload['provisionVMAgent'] = this['provisionVMAgent'];
  }

  if (this['enableAutomaticUpdates'] !== null && this['enableAutomaticUpdates'] !== undefined) {
    if (typeof this['enableAutomaticUpdates'] !== 'boolean') {
      throw new Error('this[\'enableAutomaticUpdates\'] must be of type boolean.');
    }
    payload['enableAutomaticUpdates'] = this['enableAutomaticUpdates'];
  }

  if (this['timeZone'] !== null && this['timeZone'] !== undefined) {
    if (typeof this['timeZone'].valueOf() !== 'string') {
      throw new Error('this[\'timeZone\'] must be of type string.');
    }
    payload['timeZone'] = this['timeZone'];
  }

  if (util.isArray(this['additionalUnattendContent'])) {
    payload['additionalUnattendContent'] = [];
    for (var i = 0; i < this['additionalUnattendContent'].length; i++) {
      if (this['additionalUnattendContent'][i]) {
        payload['additionalUnattendContent'][i] = this['additionalUnattendContent'][i].serialize();
      }
    }
  }

  if (this['winRM']) {
    payload['winRM'] = this['winRM'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to WindowsConfiguration schema
 *
 * @param {JSON} instance
 *
 */
WindowsConfiguration.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['provisionVMAgent'] !== undefined) {
      this['provisionVMAgent'] = instance['provisionVMAgent'];
    }

    if (instance['enableAutomaticUpdates'] !== undefined) {
      this['enableAutomaticUpdates'] = instance['enableAutomaticUpdates'];
    }

    if (instance['timeZone'] !== undefined) {
      this['timeZone'] = instance['timeZone'];
    }

    if (instance['additionalUnattendContent']) {
      var tempInstanceadditionalUnattendContent = [];
      instance['additionalUnattendContent'].forEach(function(element1) {
        if (element1) {
          element1 = new models['AdditionalUnattendContent']().deserialize(element1);
        }
        tempInstanceadditionalUnattendContent.push(element1);
      });
      this['additionalUnattendContent'] = tempInstanceadditionalUnattendContent;
    }

    if (instance['winRM']) {
      this['winRM'] = new models['WinRMConfiguration']().deserialize(instance['winRM']);
    }
  }

  return this;
};

module.exports = WindowsConfiguration;
