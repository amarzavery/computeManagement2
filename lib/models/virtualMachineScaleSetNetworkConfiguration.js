/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineScaleSetNetworkConfiguration class.
 * @constructor
 * Describes a virtual machine scale set network profile's network
 * configurations.
 * @member {string} name Gets or sets the network configuration name.
 * 
 * @member {boolean} [primary] Gets or sets whether this is a primary NIC on a
 * virtual machine.
 * 
 * @member {array} ipConfigurations Gets or sets the virtual machine scale set
 * IP Configuration.
 * 
 */
function VirtualMachineScaleSetNetworkConfiguration(parameters) {
  VirtualMachineScaleSetNetworkConfiguration['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.primary !== undefined) {
      this.primary = parameters.primary;
    }
    if (parameters.ipConfigurations) {
      var tempParametersipConfigurations = [];
      parameters.ipConfigurations.forEach(function(element) {
        if (element) {
          element = new models['VirtualMachineScaleSetIPConfiguration'](element);
        }
        tempParametersipConfigurations.push(element);
      });
      this.ipConfigurations = tempParametersipConfigurations;
    }
  }    
}

util.inherits(VirtualMachineScaleSetNetworkConfiguration, models['SubResource']);

/**
 * Validate the payload against the VirtualMachineScaleSetNetworkConfiguration schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineScaleSetNetworkConfiguration.prototype.serialize = function () {
  var payload = VirtualMachineScaleSetNetworkConfiguration['super_'].prototype.serialize.call(this);
  if (this['name'] === null || this['name'] === undefined || typeof this['name'].valueOf() !== 'string') {
    throw new Error('this[\'name\'] cannot be null or undefined and it must be of type string.');
  }
  payload['name'] = this['name'];

  if (this['primary'] !== null && this['primary'] !== undefined) {
    if (typeof this['primary'] !== 'boolean') {
      throw new Error('this[\'primary\'] must be of type boolean.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['primary'] = this['primary'];
  }

  if (!util.isArray(this['ipConfigurations'])) {
    throw new Error('this[\'ipConfigurations\'] cannot be null or undefined and it must be of type array.');
  }
  if (payload['properties'] === null || payload['properties'] === undefined) {
    payload['properties'] = {};
  }
  payload['properties']['ipConfigurations'] = [];
  for (var i = 0; i < this['ipConfigurations'].length; i++) {
    if (this['ipConfigurations'][i]) {
      payload['properties']['ipConfigurations'][i] = this['ipConfigurations'][i].serialize();
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineScaleSetNetworkConfiguration schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineScaleSetNetworkConfiguration.prototype.deserialize = function (instance) {
  VirtualMachineScaleSetNetworkConfiguration['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['primary'] !== undefined) {
        this['primary'] = instance['properties']['primary'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['ipConfigurations']) {
        var tempInstancepropertiesipConfigurations = [];
        instance['properties']['ipConfigurations'].forEach(function(element1) {
          if (element1) {
            element1 = new models['VirtualMachineScaleSetIPConfiguration']().deserialize(element1);
          }
          tempInstancepropertiesipConfigurations.push(element1);
        });
        this['ipConfigurations'] = tempInstancepropertiesipConfigurations;
      }
    }
  }

  return this;
};

module.exports = VirtualMachineScaleSetNetworkConfiguration;
