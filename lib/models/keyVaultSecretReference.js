/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the KeyVaultSecretReference class.
 * @constructor
 * Describes a reference to Key Vault Secret
 * @member {string} secretUrl Gets or sets the URL referencing a secret in a
 * Key Vault.
 * 
 * @member {object} sourceVault Gets or sets the Relative URL of the Key Vault
 * containing the secret.
 * 
 * @member {string} [sourceVault.id] Resource Id
 * 
 */
function KeyVaultSecretReference(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.secretUrl !== undefined) {
      this.secretUrl = parameters.secretUrl;
    }
    if (parameters.sourceVault) {
      this.sourceVault = new models['SubResource'](parameters.sourceVault);
    }
  }    
}


/**
 * Validate the payload against the KeyVaultSecretReference schema
 *
 * @param {JSON} payload
 *
 */
KeyVaultSecretReference.prototype.serialize = function () {
  var payload = {};
  if (this['secretUrl'] === null || this['secretUrl'] === undefined || typeof this['secretUrl'].valueOf() !== 'string') {
    throw new Error('this[\'secretUrl\'] cannot be null or undefined and it must be of type string.');
  }
  payload['secretUrl'] = this['secretUrl'];

  if (this['sourceVault']) {
    payload['sourceVault'] = this['sourceVault'].serialize();
  }
   else {  throw new Error('this[\'sourceVault\'] cannot be null or undefined.');
  }

  return payload;
};

/**
 * Deserialize the instance to KeyVaultSecretReference schema
 *
 * @param {JSON} instance
 *
 */
KeyVaultSecretReference.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['secretUrl'] !== undefined) {
      this['secretUrl'] = instance['secretUrl'];
    }

    if (instance['sourceVault']) {
      this['sourceVault'] = new models['SubResource']().deserialize(instance['sourceVault']);
    }
  }

  return this;
};

module.exports = KeyVaultSecretReference;
