/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the ComputeLongRunningOperationResult class.
 * @constructor
 * The Compute service response for long-running operations.
 * @member {string} [operationId] Gets the operation identifier.
 * 
 * @member {string} [status] Gets the operation status. Possible values for
 * this property include: 'InProgress', 'Failed', 'Succeeded', 'Preempted'.
 * 
 * @member {date} [startTime] Gets the operation start time
 * 
 * @member {date} [endTime] Gets the operation end time
 * 
 * @member {object} [properties]
 * 
 * @member {object} [properties.output] Operation output data (raw JSON)
 * 
 * @member {object} [error] Gets the operation error, if any occurred.
 * 
 * @member {array} [error.details] Gets or sets the Api error details
 * 
 * @member {object} [error.innererror] Gets or sets the Api inner error
 * 
 * @member {string} [error.innererror.exceptiontype] Gets or sets the
 * exception type.
 * 
 * @member {string} [error.innererror.errordetail] Gets or sets the internal
 * error message or exception dump.
 * 
 * @member {string} [error.code] Gets or sets the error code.
 * 
 * @member {string} [error.target] Gets or sets the target of the particular
 * error.
 * 
 * @member {string} [error.message] Gets or sets the error message.
 * 
 */
function ComputeLongRunningOperationResult(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.operationId !== undefined) {
      this.operationId = parameters.operationId;
    }
    if (parameters.status !== undefined) {
      this.status = parameters.status;
    }
    if (parameters.startTime !== undefined) {
      this.startTime = parameters.startTime;
    }
    if (parameters.endTime !== undefined) {
      this.endTime = parameters.endTime;
    }
    if (parameters.properties) {
      this.properties = new models['ComputeLongRunningOperationProperties'](parameters.properties);
    }
    if (parameters.error) {
      this.error = new models['ApiError'](parameters.error);
    }
  }    
}


/**
 * Validate the payload against the ComputeLongRunningOperationResult schema
 *
 * @param {JSON} payload
 *
 */
ComputeLongRunningOperationResult.prototype.serialize = function () {
  var payload = {};
  if (this['operationId'] !== null && this['operationId'] !== undefined) {
    if (typeof this['operationId'].valueOf() !== 'string') {
      throw new Error('this[\'operationId\'] must be of type string.');
    }
    payload['operationId'] = this['operationId'];
  }

  if (this['status'] !== null && this['status'] !== undefined) {
    var allowedValues = [ 'InProgress', 'Failed', 'Succeeded', 'Preempted' ];
    var thisstatus = this['status'];
    if (!allowedValues.some( function(item) { return item === thisstatus; })) {
      throw new Error(this['status'] + ' is not a valid value. The valid values are: ' + allowedValues);
    }
    payload['status'] = this['status'];
  }

  if (this['startTime']) {
    if (!(this['startTime'] instanceof Date || typeof this['startTime'].valueOf() === 'string' && !isNaN(Date.parse(this['startTime'])))) {
      throw new Error('this[\'startTime\'] must be of type date.');
    }
    payload['startTime'] = (this['startTime'] instanceof Date) ? this['startTime'].toISOString() : this['startTime'];
  }

  if (this['endTime']) {
    if (!(this['endTime'] instanceof Date || typeof this['endTime'].valueOf() === 'string' && !isNaN(Date.parse(this['endTime'])))) {
      throw new Error('this[\'endTime\'] must be of type date.');
    }
    payload['endTime'] = (this['endTime'] instanceof Date) ? this['endTime'].toISOString() : this['endTime'];
  }

  if (this['properties']) {
    payload['properties'] = this['properties'].serialize();
  }

  if (this['error']) {
    payload['error'] = this['error'].serialize();
  }

  return payload;
};

/**
 * Deserialize the instance to ComputeLongRunningOperationResult schema
 *
 * @param {JSON} instance
 *
 */
ComputeLongRunningOperationResult.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['operationId'] !== undefined) {
      this['operationId'] = instance['operationId'];
    }

    if (instance['status'] !== undefined) {
      this['status'] = instance['status'];
    }

    if (instance['startTime']) {
      this['startTime'] = new Date(instance['startTime']);
    }
    else if (instance['startTime'] !== undefined) {
      this['startTime'] = instance['startTime'];
    }

    if (instance['endTime']) {
      this['endTime'] = new Date(instance['endTime']);
    }
    else if (instance['endTime'] !== undefined) {
      this['endTime'] = instance['endTime'];
    }

    if (instance['properties']) {
      this['properties'] = new models['ComputeLongRunningOperationProperties']().deserialize(instance['properties']);
    }

    if (instance['error']) {
      this['error'] = new models['ApiError']().deserialize(instance['error']);
    }
  }

  return this;
};

module.exports = ComputeLongRunningOperationResult;
