/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VaultSecretGroup class.
 * @constructor
 * Describes a set of certificates which are all in the same Key Vault.
 * @member {object} [sourceVault] Gets or sets the Relative URL of the Key
 * Vault containing all of the certificates in VaultCertificates.
 * 
 * @member {string} [sourceVault.id] Resource Id
 * 
 * @member {array} [vaultCertificates] Gets or sets the list of key vault
 * references in SourceVault which contain certificates
 * 
 */
function VaultSecretGroup(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.sourceVault) {
      this.sourceVault = new models['SubResource'](parameters.sourceVault);
    }
    if (parameters.vaultCertificates) {
      var tempParametersvaultCertificates = [];
      parameters.vaultCertificates.forEach(function(element) {
        if (element) {
          element = new models['VaultCertificate'](element);
        }
        tempParametersvaultCertificates.push(element);
      });
      this.vaultCertificates = tempParametersvaultCertificates;
    }
  }    
}


/**
 * Validate the payload against the VaultSecretGroup schema
 *
 * @param {JSON} payload
 *
 */
VaultSecretGroup.prototype.serialize = function () {
  var payload = {};
  if (this['sourceVault']) {
    payload['sourceVault'] = this['sourceVault'].serialize();
  }

  if (util.isArray(this['vaultCertificates'])) {
    payload['vaultCertificates'] = [];
    for (var i = 0; i < this['vaultCertificates'].length; i++) {
      if (this['vaultCertificates'][i]) {
        payload['vaultCertificates'][i] = this['vaultCertificates'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VaultSecretGroup schema
 *
 * @param {JSON} instance
 *
 */
VaultSecretGroup.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['sourceVault']) {
      this['sourceVault'] = new models['SubResource']().deserialize(instance['sourceVault']);
    }

    if (instance['vaultCertificates']) {
      var tempInstancevaultCertificates = [];
      instance['vaultCertificates'].forEach(function(element1) {
        if (element1) {
          element1 = new models['VaultCertificate']().deserialize(element1);
        }
        tempInstancevaultCertificates.push(element1);
      });
      this['vaultCertificates'] = tempInstancevaultCertificates;
    }
  }

  return this;
};

module.exports = VaultSecretGroup;
