/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the BootDiagnosticsInstanceView class.
 * @constructor
 * The instance view of a virtual machine boot diagnostics.
 * @member {string} [consoleScreenshotBlobUri] Gets or sets the console
 * screenshot blob Uri.
 * 
 * @member {string} [serialConsoleLogBlobUri] Gets or sets the Linux serial
 * console log blob Uri.
 * 
 */
function BootDiagnosticsInstanceView(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.consoleScreenshotBlobUri !== undefined) {
      this.consoleScreenshotBlobUri = parameters.consoleScreenshotBlobUri;
    }
    if (parameters.serialConsoleLogBlobUri !== undefined) {
      this.serialConsoleLogBlobUri = parameters.serialConsoleLogBlobUri;
    }
  }    
}


/**
 * Validate the payload against the BootDiagnosticsInstanceView schema
 *
 * @param {JSON} payload
 *
 */
BootDiagnosticsInstanceView.prototype.serialize = function () {
  var payload = {};
  if (this['consoleScreenshotBlobUri'] !== null && this['consoleScreenshotBlobUri'] !== undefined) {
    if (typeof this['consoleScreenshotBlobUri'].valueOf() !== 'string') {
      throw new Error('this[\'consoleScreenshotBlobUri\'] must be of type string.');
    }
    payload['consoleScreenshotBlobUri'] = this['consoleScreenshotBlobUri'];
  }

  if (this['serialConsoleLogBlobUri'] !== null && this['serialConsoleLogBlobUri'] !== undefined) {
    if (typeof this['serialConsoleLogBlobUri'].valueOf() !== 'string') {
      throw new Error('this[\'serialConsoleLogBlobUri\'] must be of type string.');
    }
    payload['serialConsoleLogBlobUri'] = this['serialConsoleLogBlobUri'];
  }

  return payload;
};

/**
 * Deserialize the instance to BootDiagnosticsInstanceView schema
 *
 * @param {JSON} instance
 *
 */
BootDiagnosticsInstanceView.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['consoleScreenshotBlobUri'] !== undefined) {
      this['consoleScreenshotBlobUri'] = instance['consoleScreenshotBlobUri'];
    }

    if (instance['serialConsoleLogBlobUri'] !== undefined) {
      this['serialConsoleLogBlobUri'] = instance['serialConsoleLogBlobUri'];
    }
  }

  return this;
};

module.exports = BootDiagnosticsInstanceView;
