/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineScaleSetVMExtensionsSummary class.
 * @constructor
 * Extensions summary for virtual machines of a virtual machine scale set.
 * @member {string} [name] Gets the extension name.
 * 
 * @member {array} [statusesSummary] Gets the extensions information.
 * 
 */
function VirtualMachineScaleSetVMExtensionsSummary(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.statusesSummary) {
      var tempParametersstatusesSummary = [];
      parameters.statusesSummary.forEach(function(element) {
        if (element) {
          element = new models['VirtualMachineStatusCodeCount'](element);
        }
        tempParametersstatusesSummary.push(element);
      });
      this.statusesSummary = tempParametersstatusesSummary;
    }
  }    
}


/**
 * Validate the payload against the VirtualMachineScaleSetVMExtensionsSummary schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineScaleSetVMExtensionsSummary.prototype.serialize = function () {
  var payload = {};
  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (util.isArray(this['statusesSummary'])) {
    payload['statusesSummary'] = [];
    for (var i = 0; i < this['statusesSummary'].length; i++) {
      if (this['statusesSummary'][i]) {
        payload['statusesSummary'][i] = this['statusesSummary'][i].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineScaleSetVMExtensionsSummary schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineScaleSetVMExtensionsSummary.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['statusesSummary']) {
      var tempInstancestatusesSummary = [];
      instance['statusesSummary'].forEach(function(element1) {
        if (element1) {
          element1 = new models['VirtualMachineStatusCodeCount']().deserialize(element1);
        }
        tempInstancestatusesSummary.push(element1);
      });
      this['statusesSummary'] = tempInstancestatusesSummary;
    }
  }

  return this;
};

module.exports = VirtualMachineScaleSetVMExtensionsSummary;
