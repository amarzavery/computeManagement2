/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the VirtualMachineScaleSetVMInstanceView class.
 * @constructor
 * The instance view of a virtual machine scale set VM.
 * @member {number} [platformUpdateDomain] Gets or sets the Update Domain
 * count.
 * 
 * @member {number} [platformFaultDomain] Gets or sets the Fault Domain count.
 * 
 * @member {string} [rdpThumbPrint] Gets or sets the Remote desktop
 * certificate thumbprint.
 * 
 * @member {object} [vmAgent] Gets or sets the VM Agent running on the virtual
 * machine.
 * 
 * @member {string} [vmAgent.vmAgentVersion] Gets or sets the VM Agent full
 * version.
 * 
 * @member {array} [vmAgent.extensionHandlers] Gets or sets the virtual
 * machine extension handler instance view.
 * 
 * @member {array} [vmAgent.statuses] Gets or sets the resource status
 * information.
 * 
 * @member {array} [disks] Gets or sets the the disks information.
 * 
 * @member {array} [extensions] Gets or sets the extensions information.
 * 
 * @member {object} [bootDiagnostics] Gets or sets the boot diagnostics.
 * 
 * @member {string} [bootDiagnostics.consoleScreenshotBlobUri] Gets or sets
 * the console screenshot blob Uri.
 * 
 * @member {string} [bootDiagnostics.serialConsoleLogBlobUri] Gets or sets the
 * Linux serial console log blob Uri.
 * 
 * @member {array} [statuses] Gets or sets the resource status information.
 * 
 */
function VirtualMachineScaleSetVMInstanceView(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.platformUpdateDomain !== undefined) {
      this.platformUpdateDomain = parameters.platformUpdateDomain;
    }
    if (parameters.platformFaultDomain !== undefined) {
      this.platformFaultDomain = parameters.platformFaultDomain;
    }
    if (parameters.rdpThumbPrint !== undefined) {
      this.rdpThumbPrint = parameters.rdpThumbPrint;
    }
    if (parameters.vmAgent) {
      this.vmAgent = new models['VirtualMachineAgentInstanceView'](parameters.vmAgent);
    }
    if (parameters.disks) {
      var tempParametersdisks = [];
      parameters.disks.forEach(function(element) {
        if (element) {
          element = new models['DiskInstanceView'](element);
        }
        tempParametersdisks.push(element);
      });
      this.disks = tempParametersdisks;
    }
    if (parameters.extensions) {
      var tempParametersextensions = [];
      parameters.extensions.forEach(function(element1) {
        if (element1) {
          element1 = new models['VirtualMachineExtensionInstanceView'](element1);
        }
        tempParametersextensions.push(element1);
      });
      this.extensions = tempParametersextensions;
    }
    if (parameters.bootDiagnostics) {
      this.bootDiagnostics = new models['BootDiagnosticsInstanceView'](parameters.bootDiagnostics);
    }
    if (parameters.statuses) {
      var tempParametersstatuses = [];
      parameters.statuses.forEach(function(element2) {
        if (element2) {
          element2 = new models['InstanceViewStatus'](element2);
        }
        tempParametersstatuses.push(element2);
      });
      this.statuses = tempParametersstatuses;
    }
  }    
}


/**
 * Validate the payload against the VirtualMachineScaleSetVMInstanceView schema
 *
 * @param {JSON} payload
 *
 */
VirtualMachineScaleSetVMInstanceView.prototype.serialize = function () {
  var payload = {};
  if (this['platformUpdateDomain'] !== null && this['platformUpdateDomain'] !== undefined) {
    if (typeof this['platformUpdateDomain'] !== 'number') {
      throw new Error('this[\'platformUpdateDomain\'] must be of type number.');
    }
    payload['platformUpdateDomain'] = this['platformUpdateDomain'];
  }

  if (this['platformFaultDomain'] !== null && this['platformFaultDomain'] !== undefined) {
    if (typeof this['platformFaultDomain'] !== 'number') {
      throw new Error('this[\'platformFaultDomain\'] must be of type number.');
    }
    payload['platformFaultDomain'] = this['platformFaultDomain'];
  }

  if (this['rdpThumbPrint'] !== null && this['rdpThumbPrint'] !== undefined) {
    if (typeof this['rdpThumbPrint'].valueOf() !== 'string') {
      throw new Error('this[\'rdpThumbPrint\'] must be of type string.');
    }
    payload['rdpThumbPrint'] = this['rdpThumbPrint'];
  }

  if (this['vmAgent']) {
    payload['vmAgent'] = this['vmAgent'].serialize();
  }

  if (util.isArray(this['disks'])) {
    payload['disks'] = [];
    for (var i = 0; i < this['disks'].length; i++) {
      if (this['disks'][i]) {
        payload['disks'][i] = this['disks'][i].serialize();
      }
    }
  }

  if (util.isArray(this['extensions'])) {
    payload['extensions'] = [];
    for (var i1 = 0; i1 < this['extensions'].length; i1++) {
      if (this['extensions'][i1]) {
        payload['extensions'][i1] = this['extensions'][i1].serialize();
      }
    }
  }

  if (this['bootDiagnostics']) {
    payload['bootDiagnostics'] = this['bootDiagnostics'].serialize();
  }

  if (util.isArray(this['statuses'])) {
    payload['statuses'] = [];
    for (var i2 = 0; i2 < this['statuses'].length; i2++) {
      if (this['statuses'][i2]) {
        payload['statuses'][i2] = this['statuses'][i2].serialize();
      }
    }
  }

  return payload;
};

/**
 * Deserialize the instance to VirtualMachineScaleSetVMInstanceView schema
 *
 * @param {JSON} instance
 *
 */
VirtualMachineScaleSetVMInstanceView.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['platformUpdateDomain'] !== undefined) {
      this['platformUpdateDomain'] = instance['platformUpdateDomain'];
    }

    if (instance['platformFaultDomain'] !== undefined) {
      this['platformFaultDomain'] = instance['platformFaultDomain'];
    }

    if (instance['rdpThumbPrint'] !== undefined) {
      this['rdpThumbPrint'] = instance['rdpThumbPrint'];
    }

    if (instance['vmAgent']) {
      this['vmAgent'] = new models['VirtualMachineAgentInstanceView']().deserialize(instance['vmAgent']);
    }

    if (instance['disks']) {
      var tempInstancedisks = [];
      instance['disks'].forEach(function(element3) {
        if (element3) {
          element3 = new models['DiskInstanceView']().deserialize(element3);
        }
        tempInstancedisks.push(element3);
      });
      this['disks'] = tempInstancedisks;
    }

    if (instance['extensions']) {
      var tempInstanceextensions = [];
      instance['extensions'].forEach(function(element4) {
        if (element4) {
          element4 = new models['VirtualMachineExtensionInstanceView']().deserialize(element4);
        }
        tempInstanceextensions.push(element4);
      });
      this['extensions'] = tempInstanceextensions;
    }

    if (instance['bootDiagnostics']) {
      this['bootDiagnostics'] = new models['BootDiagnosticsInstanceView']().deserialize(instance['bootDiagnostics']);
    }

    if (instance['statuses']) {
      var tempInstancestatuses = [];
      instance['statuses'].forEach(function(element5) {
        if (element5) {
          element5 = new models['InstanceViewStatus']().deserialize(element5);
        }
        tempInstancestatuses.push(element5);
      });
      this['statuses'] = tempInstancestatuses;
    }
  }

  return this;
};

module.exports = VirtualMachineScaleSetVMInstanceView;
