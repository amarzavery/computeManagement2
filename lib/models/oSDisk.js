/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

/**
 * @class
 * Initializes a new instance of the OSDisk class.
 * @constructor
 * Describes an Operating System disk.
 * @member {string} [osType] Gets or sets the Operating System type. Possible
 * values for this property include: 'Windows', 'Linux'.
 * 
 * @member {object} [encryptionSettings] Gets or sets the disk encryption
 * settings.
 * 
 * @member {object} [encryptionSettings.diskEncryptionKey] Gets or sets the
 * disk encryption key which is a KeyVault Secret.
 * 
 * @member {string} [encryptionSettings.diskEncryptionKey.secretUrl] Gets or
 * sets the URL referencing a secret in a Key Vault.
 * 
 * @member {object} [encryptionSettings.diskEncryptionKey.sourceVault] Gets or
 * sets the Relative URL of the Key Vault containing the secret.
 * 
 * @member {string} [encryptionSettings.diskEncryptionKey.sourceVault.id]
 * Resource Id
 * 
 * @member {object} [encryptionSettings.keyEncryptionKey] Gets or sets the key
 * encryption key which is KeyVault Key.
 * 
 * @member {string} [encryptionSettings.keyEncryptionKey.keyUrl] Gets or sets
 * the URL referencing a key in a Key Vault.
 * 
 * @member {object} [encryptionSettings.keyEncryptionKey.sourceVault] Gets or
 * sets the Relative URL of the Key Vault containing the key
 * 
 * @member {string} [encryptionSettings.keyEncryptionKey.sourceVault.id]
 * Resource Id
 * 
 * @member {string} name Gets or sets the disk name.
 * 
 * @member {object} vhd Gets or sets the Virtual Hard Disk.
 * 
 * @member {string} [vhd.uri] Gets or sets the virtual hard disk's uri. It
 * should be a valid Uri to a virtual hard disk.
 * 
 * @member {object} [image] Gets or sets the Source User Image
 * VirtualHardDisk. This VirtualHardDisk will be copied before using it to
 * attach to the Virtual Machine.If SourceImage is provided, the destination
 * VirtualHardDisk should not exist.
 * 
 * @member {string} [image.uri] Gets or sets the virtual hard disk's uri. It
 * should be a valid Uri to a virtual hard disk.
 * 
 * @member {string} [caching] Gets or sets the caching type. Possible values
 * for this property include: 'None', 'ReadOnly', 'ReadWrite'.
 * 
 * @member {string} createOption Gets or sets the create option. Possible
 * values for this property include: 'fromImage', 'empty', 'attach'.
 * 
 * @member {number} [diskSizeGB] Gets or sets the initial disk size in GB for
 * blank data disks, and the new desired size for existing OS and Data disks.
 * 
 */
function OSDisk(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.osType !== undefined) {
      this.osType = parameters.osType;
    }
    if (parameters.encryptionSettings) {
      this.encryptionSettings = new models['DiskEncryptionSettings'](parameters.encryptionSettings);
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.vhd) {
      this.vhd = new models['VirtualHardDisk'](parameters.vhd);
    }
    if (parameters.image) {
      this.image = new models['VirtualHardDisk'](parameters.image);
    }
    if (parameters.caching !== undefined) {
      this.caching = parameters.caching;
    }
    if (parameters.createOption !== undefined) {
      this.createOption = parameters.createOption;
    }
    if (parameters.diskSizeGB !== undefined) {
      this.diskSizeGB = parameters.diskSizeGB;
    }
  }    
}


/**
 * Validate the payload against the OSDisk schema
 *
 * @param {JSON} payload
 *
 */
OSDisk.prototype.serialize = function () {
  var payload = {};
  if (this['osType'] !== null && this['osType'] !== undefined) {
    if (typeof this['osType'].valueOf() !== 'string') {
      throw new Error('this[\'osType\'] must be of type string.');
    }
    payload['osType'] = this['osType'];
  }

  if (this['encryptionSettings']) {
    payload['encryptionSettings'] = this['encryptionSettings'].serialize();
  }

  if (this['name'] === null || this['name'] === undefined || typeof this['name'].valueOf() !== 'string') {
    throw new Error('this[\'name\'] cannot be null or undefined and it must be of type string.');
  }
  payload['name'] = this['name'];

  if (this['vhd']) {
    payload['vhd'] = this['vhd'].serialize();
  }
   else {  throw new Error('this[\'vhd\'] cannot be null or undefined.');
  }

  if (this['image']) {
    payload['image'] = this['image'].serialize();
  }

  if (this['caching'] !== null && this['caching'] !== undefined) {
    if (typeof this['caching'].valueOf() !== 'string') {
      throw new Error('this[\'caching\'] must be of type string.');
    }
    payload['caching'] = this['caching'];
  }

  if (this['createOption'] === null || this['createOption'] === undefined || typeof this['createOption'].valueOf() !== 'string') {
    throw new Error('this[\'createOption\'] cannot be null or undefined and it must be of type string.');
  }
  payload['createOption'] = this['createOption'];

  if (this['diskSizeGB'] !== null && this['diskSizeGB'] !== undefined) {
    if (typeof this['diskSizeGB'] !== 'number') {
      throw new Error('this[\'diskSizeGB\'] must be of type number.');
    }
    payload['diskSizeGB'] = this['diskSizeGB'];
  }

  return payload;
};

/**
 * Deserialize the instance to OSDisk schema
 *
 * @param {JSON} instance
 *
 */
OSDisk.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['osType'] !== undefined) {
      this['osType'] = instance['osType'];
    }

    if (instance['encryptionSettings']) {
      this['encryptionSettings'] = new models['DiskEncryptionSettings']().deserialize(instance['encryptionSettings']);
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['vhd']) {
      this['vhd'] = new models['VirtualHardDisk']().deserialize(instance['vhd']);
    }

    if (instance['image']) {
      this['image'] = new models['VirtualHardDisk']().deserialize(instance['image']);
    }

    if (instance['caching'] !== undefined) {
      this['caching'] = instance['caching'];
    }

    if (instance['createOption'] !== undefined) {
      this['createOption'] = instance['createOption'];
    }

    if (instance['diskSizeGB'] !== undefined) {
      this['diskSizeGB'] = instance['diskSizeGB'];
    }
  }

  return this;
};

module.exports = OSDisk;
