/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * @class
 * Initializes a new instance of the ImageReference class.
 * @constructor
 * The image reference.
 * @member {string} [publisher] Gets or sets the image publisher.
 * 
 * @member {string} [offer] Gets or sets the image offer.
 * 
 * @member {string} [sku] Gets or sets the image sku.
 * 
 * @member {string} [version] Gets or sets the image version. The allowed
 * formats are Major.Minor.Build or 'latest'. Major, Minor and Build being
 * decimal numbers. Specify 'latest' to use the latest version of image.
 * 
 */
function ImageReference(parameters) {
  if (parameters !== null && parameters !== undefined) {
    if (parameters.publisher !== undefined) {
      this.publisher = parameters.publisher;
    }
    if (parameters.offer !== undefined) {
      this.offer = parameters.offer;
    }
    if (parameters.sku !== undefined) {
      this.sku = parameters.sku;
    }
    if (parameters.version !== undefined) {
      this.version = parameters.version;
    }
  }    
}


/**
 * Validate the payload against the ImageReference schema
 *
 * @param {JSON} payload
 *
 */
ImageReference.prototype.serialize = function () {
  var payload = {};
  if (this['publisher'] !== null && this['publisher'] !== undefined) {
    if (typeof this['publisher'].valueOf() !== 'string') {
      throw new Error('this[\'publisher\'] must be of type string.');
    }
    payload['publisher'] = this['publisher'];
  }

  if (this['offer'] !== null && this['offer'] !== undefined) {
    if (typeof this['offer'].valueOf() !== 'string') {
      throw new Error('this[\'offer\'] must be of type string.');
    }
    payload['offer'] = this['offer'];
  }

  if (this['sku'] !== null && this['sku'] !== undefined) {
    if (typeof this['sku'].valueOf() !== 'string') {
      throw new Error('this[\'sku\'] must be of type string.');
    }
    payload['sku'] = this['sku'];
  }

  if (this['version'] !== null && this['version'] !== undefined) {
    if (typeof this['version'].valueOf() !== 'string') {
      throw new Error('this[\'version\'] must be of type string.');
    }
    payload['version'] = this['version'];
  }

  return payload;
};

/**
 * Deserialize the instance to ImageReference schema
 *
 * @param {JSON} instance
 *
 */
ImageReference.prototype.deserialize = function (instance) {
  if (instance) {
    if (instance['publisher'] !== undefined) {
      this['publisher'] = instance['publisher'];
    }

    if (instance['offer'] !== undefined) {
      this['offer'] = instance['offer'];
    }

    if (instance['sku'] !== undefined) {
      this['sku'] = instance['sku'];
    }

    if (instance['version'] !== undefined) {
      this['version'] = instance['version'];
    }
  }

  return this;
};

module.exports = ImageReference;
